{"version":3,"sources":["Components/Header/Header.js","Components/IncomeForm/IncomeForm.js","Components/IncomeItem/IncomeItem.js","Components/IncomeList/IncomeList.js","App.js","serviceWorker.js","index.js"],"names":["Header","totalIncome","className","IncomeForm","income","setIncome","desc","useRef","date","price","onSubmit","e","preventDefault","d","current","value","split","newD","Date","getTime","type","name","id","placeholder","ref","IncomeItem","index","removeIncome","day","getDate","month","getMonth","year","getFullYear","onClick","IncomeList","i","temp","filter","v","sort","a","b","map","key","App","useState","setTotalIncom","useEffect","length","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e1df95d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header({totalIncome}) {\r\n  return (\r\n      <header>\r\n          <h1>Income Tracker</h1>\r\n          <div className=\"total-income\">${totalIncome}</div>\r\n      </header>\r\n  );\r\n}\r\nexport default Header;","import React, {useRef} from \"react\";\r\n\r\nfunction IncomeForm({income, setIncome}) {\r\n    const desc = useRef(null);\r\n    const date = useRef(null);\r\n    const price = useRef(null);\r\n    const AddIncome = e => {\r\n        e.preventDefault();\r\n       let d = date.current.value.split(\"-\");\r\n       let newD = new Date(d[0], d[1], d[2]);\r\n\r\n       setIncome([...income, {\r\n           \"desc\": desc.current.value,\r\n           \"price\": price.current.value,\r\n            \"date\": newD.getTime()\r\n       }]);\r\n       desc.current.value =\"\";\r\n       date.current.value =null;\r\n       price.current.value =null;\r\n\r\n    };\r\n return (\r\n     <form className=\"income-form\" onSubmit={AddIncome}>\r\n         <div className=\"form-inner\">\r\n             <input type=\"text\" name=\"desc\" id=\"desc\" placeholder=\"Income Description ...\" ref={desc}/>\r\n             <input type=\"number\" name=\"price\" id=\"price\" placeholder=\"Price\" ref={price}/>\r\n             <input type=\"date\" name=\"date\" id=\"date\" placeholder=\"Income date ...\" ref={date}/>\r\n             <input type=\"submit\" value=\"Add Income\"/>\r\n         </div>\r\n     </form>\r\n );\r\n}\r\nexport default IncomeForm;","import React from \"react\";\r\n\r\nfunction IncomeItem({income, index, removeIncome}) {\r\n    let date = new Date(income.date);\r\n    let day = date.getDate();\r\n    let month = date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n    const removeHandle = i => {\r\n        removeIncome(i)\r\n    };\r\n return(\r\n     <div className=\"income-item\">\r\n         <button className=\"remove-item\" onClick={() => removeHandle(index)}>x</button>\r\n         <div className=\"desc\">{income.desc}</div>\r\n         <div className=\"price\">${income.price}</div>\r\n         <div className=\"date\">{day + \"/\" + month + \"/\" + year}</div>\r\n     </div>\r\n );\r\n}\r\nexport default IncomeItem;","import React from \"react\";\r\nimport IncomeItem from \"../IncomeItem/IncomeItem\";\r\nfunction IncomeList({income, setIncome}) {\r\n    const removeIncome = i => {\r\n        let temp = income.filter((v, index) => index !== i);\r\n        setIncome(temp);\r\n    };\r\n    const sortByDate = (a, b) => {\r\n        return a.date - b.date;\r\n    };\r\n   return (\r\n       <div className=\"income-list\">\r\n           {income.sort(sortByDate).map((value, index) => (\r\n             <IncomeItem key={index} income={value} index={index} removeIncome={removeIncome}/>\r\n           ))}\r\n       </div>\r\n   );\r\n}\r\nexport default IncomeList;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport IncomeForm from './Components/IncomeForm/IncomeForm';\nimport IncomeList from \"./Components/IncomeList/IncomeList\";\nfunction App() {\n  const [income, setIncome] = useState([]);\n  const [totalIncome, setTotalIncom] = useState(0);\n\n  useEffect(() => {\n   let temp = 0;\n   for (let i=0;i<income.length;i++){\n       temp += parseInt(income[i].price);\n   }\n   setTotalIncom(temp)\n  }, [income]);\n\n  return (\n    <div className=\"App\">\n       <Header totalIncome={totalIncome}/>\n       <IncomeForm income={income} setIncome={setIncome}/>\n       <IncomeList income={income} setIncome={setIncome}/>\n        {/*{(income.length > 0) ? income[0].desc : ''}*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}